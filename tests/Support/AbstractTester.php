<?php

declare(strict_types=1);

namespace App\Tests\Support;

use Codeception\Actor;
use Codeception\Scenario;
use Tests\Support\Fixture\Fixture;

class AbstractTester extends Actor
{
    use Fixture;

    private const int USLEEP_VALUE = 100000;

    private const string QUEUE_PREFIX = 'test_';

    public function getScenario(): Scenario
    {
        return parent::getScenario(); // TODO: Change the autogenerated stub
    }

    public function listenRoutingKeys(array $routingKeys, ?string $exchange = 'test'): void
    {
        foreach ($routingKeys as $routingKey) {
            if (!is_string($routingKey)) {
                continue;
            }

            $queueName = self::QUEUE_PREFIX . $routingKey;

            $this->declareQueue($queueName);

            $this->bindQueueToExchange($queueName, $exchange, $routingKey);

            $this->scheduleQueueCleanup($queueName);

            $this->purgeQueue($queueName);
        }
    }

    public function seeMessageWithRoutingKeyContainsText(string $routingKey, string $text): void
    {
        usleep(self::USLEEP_VALUE);

        $this->seeMessageInQueueContainsText(self::QUEUE_PREFIX . $routingKey, $text);
    }

    public function dontSeeMessageWithRoutingKey(string $routingKey): void
    {
        usleep(self::USLEEP_VALUE);

        $this->seeQueueIsEmpty(self::QUEUE_PREFIX . $routingKey);
    }

    public function initializeMongoDb(): void
    {
        try {
            $this->runSymfonyConsoleCommand('doctrine:mongodb:schema:create');
        } catch (\Throwable $e) {
            // Don't fail if db already exists
        }
    }
}
